name: Llama-Java-CI
on:
  workflow_dispatch:
    inputs:
      llama_branch:
        description: 'llama.cpp branch'
        required: true
        default: 'master'

jobs:
  #build linux lib
  build-linux-lib:
    runs-on: ubuntu-latest
    steps:
      - name: Dependencies
        id: depends
        run: |
          sudo apt-get update
          sudo apt-get install build-essential
          sudo apt-get install libopenblas-dev
          sudo apt-get install libopenblas64-dev

      - name: Clone project
        id: clone_project
        run: |
          git clone -b ${{ github.event.inputs.llama_branch }} --single-branch https://github.com/ggerganov/llama.cpp.git
          git clone https://github.com/eoctet/llama-java-core.git
          cp llama-java-core/llamajava/* llama.cpp

      - name: Update MakeFile
        id: makefile
        shell: bash
        run: |
          cd llama.cpp
          if [ ! -f "llamajava.cpp" ]; then
            echo "llamajava.cpp not found"
            exit 1
          fi

          if [ ! -f "Makefile_backup" ]; then
            cp "Makefile" "Makefile_backup"
          fi

          BUILD_LLAMA_JAVA_CMD="llamajava.o: llamajava.cpp llamajava.h jni.h jni_md.h \n\t\$(CXX) \$(CXXFLAGS) -c $< -o \$@\n"
          LIB_LLAMA_CMD="libllama.so: llama.o ggml.o \$(OBJS)"
          BUILD_LLAMA_JAVA_SO_CMD="$BUILD_LLAMA_JAVA_CMD\nlibllama.so: llama.o ggml.o grammar-parser.o llamajava.o \$(OBJS)"
          echo $BUILD_LLAMA_JAVA_SO_CMD
          sed -i "s/$LIB_LLAMA_CMD/$BUILD_LLAMA_JAVA_SO_CMD/g" "Makefile"

      - name: Build
        id: make_build
        shell: bash
        run: |
          cd llama.cpp
          make clean
          make LLAMA_OPENBLAS=1 libllama.so
          if [ -f "libllama.so" ]; then
            ls -l
            echo "Build libllama.so success"
          fi

      - name: Upload lib file
        uses: actions/upload-artifact@v3
        with:
          name: linux-libllama
          path: llama.cpp/libllama.so

  #build macos lib
  build-macos-lib:
    runs-on: macos-latest
    steps:
      - name: Clone project
        id: clone_project
        run: |
          git clone -b ${{ github.event.inputs.llama_branch }} --single-branch https://github.com/ggerganov/llama.cpp.git
          git clone https://github.com/eoctet/llama-java-core.git
          cp llama-java-core/llamajava/* llama.cpp

      - name: Update MakeFile
        id: makefile
        shell: bash
        run: |
          cd llama.cpp
          if [ ! -f "llamajava.cpp" ]; then
            echo "llamajava.cpp not found"
            exit 1
          fi

          if [ ! -f "Makefile_backup" ]; then
            cp "Makefile" "Makefile_backup"
          fi
          
          BUILD_LLAMA_JAVA_CMD="llamajava.o: llamajava.cpp llamajava.h jni.h jni_md.h \n\t\$(CXX) \$(CXXFLAGS) -c $< -o \$@\n"
          BUILD_LLAMA_JAVA_DYLIB_CMD="$BUILD_LLAMA_JAVA_CMD\nlibllama.dylib: llama.o ggml.o grammar-parser.o llamajava.o \$(OBJS) \n\t\$(CXX) \$(CXXFLAGS) -shared -fPIC -o \$@ $^ \$(LDFLAGS)\n"
          BUILD_LLAMA_CMD="$BUILD_LLAMA_JAVA_DYLIB_CMD\nclean:"
          echo $BUILD_LLAMA_CMD
          sed -i "" -e "s/clean:/$BUILD_LLAMA_CMD/g" "Makefile"

      - name: Build
        id: make_build
        shell: bash
        run: |
          cd llama.cpp
          make clean
          make libllama.dylib
          if [ -f "libllama.dylib" ]; then
            ls -l
            echo "Build libllama.dylib success"
          fi

      - name: Upload lib file
        uses: actions/upload-artifact@v3
        with:
          name: macos-libllama
          path: llama.cpp/libllama.dylib

  # maven build & deploy
  maven-build-deploy:
    runs-on: ubuntu-latest

    needs:
      - build-linux-lib
      - build-macos-lib

    steps:
      - uses: actions/checkout@v4
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'oracle'
          architecture: 'x64'
          cache: 'maven'
          server-id: 'ossrh'
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.MAVEN_PRIVATE_KEY }}

      - name: Download linux lib
        id: download_linux_lib
        uses: actions/download-artifact@v3
        with:
          name: linux-libllama
          path: src/main/resources/linux-x86-64

      - name: Download macos lib
        id: download_macos_lib
        uses: actions/download-artifact@v3
        with:
          name: macos-libllama
          path: src/main/resources/darwin-x86-64

      - name: Show libs
        id: show_libs
        run: |
          ls -l src/main/resources/*

      - name: Build with Maven
        run: mvn clean package deploy
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_REPO_NAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_REPO_CODE }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_PRIVATE_KEY_PASS }}
